name: ${{ variables['Build.DefinitionName'] }} $(Date:yyyyMMdd).$(Rev:rr)

trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - bugfix/*

pool:
  vmImage: ubuntu-latest

parameters:
  # set this (rarely) to force new build quality check metric baseline
  - name: ForceNewBuildQualityCheckBaseline
    type: boolean
    default: false
    displayName: 'Force New Build Quality Check Baseline (for code coverage comparisons)'

# ACAE = Azure Container App Environment
# ACA = Azure Container App
# ACR = Azure Container Registry
variables:
  #System.Debug: true
  BQC.ForceNewBaseline: ${{ parameters.ForceNewBuildQualityCheckBaseline }}
  #DD_CIVISIBILITY_AGENTLESS_ENABLED: true
  #DD_API_KEY: $(DataDogApiKey_CICDMetrics)
  #DD_SITE: us3.datadoghq.com
  #DD_AGENT_HOST: $(Agent.MachineName)
  AZDO_SERVICE_CONNECTION: Azure FSP NonProd
  ACR_NAME: fspacr-fcbcd2eubkcwfjep.azurecr.io
  ACAE_RG: Infrastructure_RG
  ACR_IMAGE_TAG: $(Build.BuildId)

stages:
  - stage: stage_ci_build
    displayName: 'CI: Build Artifacts'
    jobs:
    - job: job_ci_build
      displayName: Build, Unit Test, Cover
      pool: FSPStageManagedPoolDeploy
      variables:
        PROJECT_ROOT_FOLDER: $(System.DefaultWorkingDirectory)
        DOTNET_PROJECT_FILE: $(PROJECT_ROOT_FOLDER)/FSPSystem.AppHost/FSPSystem.AppHost.csproj
        DOTNET_SOLUTION_FILE: $(PROJECT_ROOT_FOLDER)/FSPSystem.slnx
        OUT_BASE_FOLDER: $(Build.ArtifactStagingDirectory)/out
      steps:
      - checkout: self

      - task: UseDotNet@2
        inputs:
          version: '9.x'
        displayName: Set up .NET 9

      - script: |
          pwd
          printenv | sort
        displayName: Show env vars

      - task: NuGetAuthenticate@1
      - task: NuGetToolInstaller@1

      - bash: |
          # show each command and line number as this script runs
          set -x && PS4='##[section]➡️ Pipeline task line # ${LINENO}: '
          pwd

          mkdir -p $(OUT_BASE_FOLDER)

          chmod 777 ./.azdo/pipelines/build-test-publish.sh
          #chmod 777 ./.azdo/pipelines/container-image-create-and-publish.sh
          ./.azdo/pipelines/build-test-publish.sh
        workingDirectory: $(System.DefaultWorkingDirectory)
        displayName: Build with checks, test, coverage

      - bash: |
          pwd
          ls -RalF
        workingDirectory: $(OUT_BASE_FOLDER)
        displayName: List output folder

      - bash: |
          pwd
          ls -RalF
        workingDirectory: $(Build.ArtifactStagingDirectory)
        displayName: List artifact staging folder

      - publish: $(OUT_BASE_FOLDER)
        artifact: output
        displayName: Publish 'output' pipeline artifact

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: $(OUT_BASE_FOLDER)/testresults
          failTaskOnFailedTests: false
          testRunTitle: 'CI - Unit Tests'
        displayName: Publish test results

      - task: reportgenerator@5
        inputs:
          reports: $(OUT_BASE_FOLDER)/coverage/**/cobertura.xml
          targetdir: $(OUT_BASE_FOLDER)/coverage
          sourcedirs: $(System.DefaultWorkingDirectory)
          reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura'
          publishCodeCoverageResults: true

      - task: BuildQualityChecks@9
        inputs:
          checkWarnings: true
          warningFailOption: 'fixed'
          warningThreshold: '0'
          showStatistics: true
          evaluateTaskWarnings: true
          checkCoverage: true
          coverageFailOption: 'fixed'
          coverageType: 'lines'
          treat0of0as100: true
          coverageThreshold: '60'
          forceCoverageImprovement: false
          coverageUpperThreshold: '80'
          ignoreDecreaseAboveUpperThreshold: false
          includePartiallySucceeded: false

      #- task: SnykSecurityScan@1
      #  inputs:
      #    serviceConnectionEndpoint: 'Snyk FSP'
      #    testType: 'app'
      #    targetFile: '$(System.DefaultWorkingDirectory)/FSPSystem.AppHost'
      #    monitorWhen: 'always'
      #    failOnIssues: false
      #    projectName: 'FSP'
      #    organization: 'ConnexPay'
      #  condition: succeededOrFailed()
      #  displayName: Snyk Security Scan - App

      #- task: SnykSecurityScan@1
      #  inputs:
      #    serviceConnectionEndpoint: 'Snyk FSP'
      #    testType: 'code'
      #    failOnIssues: false
      #    projectName: 'FSP'
      #    organization: 'ConnexPay'
      #    additionalArguments: '--all-projects'
      #  condition: succeededOrFailed()
      #  displayName: Snyk Security Scan - Code

# Only run the Deploy stage when manually triggered and only on specific branches
  - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
    #- ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/bugfix/')) }}:
      - stage: stage_container_push
        displayName: Push Containers to ACR
        dependsOn: stage_ci_build
        jobs:
          - job: job_container_push
            displayName: Push Container Images to ACR
            pool: FSPStageManagedPoolDeploy

            steps:
              - checkout: self

              - task: UseDotNet@2
                inputs:
                  version: '9.x'
                displayName: Set up .NET 9
        
              - script: |
                  pwd
                  printenv | sort
                displayName: Show env vars

              - task: AzureCLI@2
                inputs:
                  azureSubscription: $(AZDO_SERVICE_CONNECTION)
                  scriptType: bash
                  scriptLocation: inlineScript
                  keepAzSessionActive: true
                  inlineScript: |
                    # show each command and line number as this script runs
                    set -x && PS4='##[section]➡️ Pipeline task line # ${LINENO}: '
                    
                    chmod 777 ./.azdo/pipelines/container-image-create-and-publish.sh
                    ./.azdo/pipelines/container-image-create-and-publish.sh
                displayName: Create and publish container image

# Only run the Deploy stage when manually triggered and only on specific branches
  - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
    #- ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/bugfix/')) }}:
      - stage: stage_deploy_to_stage
        displayName: Stage - Deploy to env Stage
        dependsOn: stage_container_push
        variables:
          ACA_RG: Stage_RG
          ACAE_NAME: cpayfspstage
        jobs:
          - job: job_deploy_apps
            displayName: Job - Deploy Apps to env Stage
            pool: FSPStageManagedPoolDeploy

            steps:
              - checkout: none

              - script: |
                  pwd
                  printenv | sort
                displayName: Show env vars

              - template: ./pipeline-templates/steps-acae-show.yml
                parameters:
                  azdoServiceConnection: $(AZDO_SERVICE_CONNECTION)
                  acaeRg: $(ACAE_RG)
                  acaeName: $(ACAE_NAME)

              # deploy fspstage-processmanager
              - template: ./pipeline-templates/steps-aca-deploy.yml
                parameters:
                  azdoServiceConnection: $(AZDO_SERVICE_CONNECTION)
                  acaRg: $(ACA_RG)
                  acaName: fspstage-processmanager
                  fullContainerImageName: ${{ variables.ACR_NAME }}/fspsystem-processmanager:$(ACR_IMAGE_TAG)

              # deploy fspstage-managementapi
              - template: ./pipeline-templates/steps-aca-deploy.yml
                parameters:
                  azdoServiceConnection: $(AZDO_SERVICE_CONNECTION)
                  acaRg: $(ACA_RG)
                  acaName: fspstage-managementapi
                  fullContainerImageName: ${{ variables.ACR_NAME }}/fspsystem-managementapi:$(ACR_IMAGE_TAG)

              # deploy fspstage-paymentinstructionapi
              - template: ./pipeline-templates/steps-aca-deploy.yml
                parameters:
                  azdoServiceConnection: $(AZDO_SERVICE_CONNECTION)
                  acaRg: $(ACA_RG)
                  acaName: fspstage-paymentinstructionapi
                  fullContainerImageName: ${{ variables.ACR_NAME }}/fspsystem-paymentinstructionapi:$(ACR_IMAGE_TAG)

              # deploy fspstage-webhooks
              - template: ./pipeline-templates/steps-aca-deploy.yml
                parameters:
                  azdoServiceConnection: $(AZDO_SERVICE_CONNECTION)
                  acaRg: $(ACA_RG)
                  acaName: fspstage-webhooks
                  fullContainerImageName: ${{ variables.ACR_NAME }}/fspsystem-webhooks:$(ACR_IMAGE_TAG)




#- job: ValidateProvisioning
#  displayName: User Validation for Provisioning
#  dependsOn: job_pre_deploy
#  #condition: succeeded('PreDeployToAzure') # only run if the previous job succeeded
#  condition: false
#  pool: server
#  timeoutInMinutes: 4320 # job times out in 3 days
#  steps:
#  - task: ManualValidation@1
#    timeoutInMinutes: 1440 # task times out in 1 day
#    inputs:
#      #notifyUsers: |
#      #  test@test.com,
#      #  example@example.com
#      #approvers: ...
#      instructions: 'Please review the results of the preview provisioning task. If provisioning preview is not as expected, please click "Reject" to halt the deployment. If no issues, please click "Resume" to continue with the deployment.'
#      # TODO: change this to false before productionizing:
#      allowApproversToApproveTheirOwnRuns: true
#      onTimeout: 'reject'
